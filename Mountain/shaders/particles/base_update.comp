#version 460 core

#include "../utils.glsl"
#include "common.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform uint particleCount;

uniform float particleLifetime;

uniform float deltaTime;
uniform float time;

layout(std430, binding = 0) coherent buffer AliveParticles
{
    bool aliveParticles[]; // true if the particle is alive and should be updated
};

layout(std430, binding = 1) buffer Particles
{
    Particle particles[];
};

Particle NewParticle()
{
    float r = Random(vec2(float(gl_GlobalInvocationID.x), time));
    float r2 = Random(vec2(r, time));

    return Particle(
        particleLifetime,
        int[3](0.f, 0.f, 0.f),
        vec2(0.f, 0.f),
        vec2(r, r2),
        vec4(1.f)
    );
}

void main()
{
    const uint id = gl_GlobalInvocationID.x;
    Particle particle = particles[id]; // We take a copy of the current particle here so we need to remember to reinsert it in the buffer before exiting

    if (!aliveParticles[id])
        return;

    if (particle.lifetime <= 0.f)
    {
        float negativeInfinity = -1.f / 0.f;

        if (particle.lifetime > negativeInfinity)
        {
            aliveParticles[id] = false;
            particle.lifetime = negativeInfinity; // Use negative infinity as a flag
            particles[id] = particle;
            return;
        }
        else
        {
            aliveParticles[id] = true;
            particle = NewParticle();
        }
    }

    particle.offset += particle.velocity * deltaTime;

    // Add optional operations here

    particle.lifetime -= deltaTime;

    particles[id] = particle;
}
