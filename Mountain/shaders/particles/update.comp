#version 460 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#include "../utils.glsl"
#include "common.glsl"
#include "module_types.glsl"

uniform float time;

#include "color_over_lifetime.glsl"
#include "force_over_lifetime.glsl"

uniform uint enabledModules;

Particle NewParticle()
{
    float r = Random(vec2(gl_GlobalInvocationID.x, time));
    float r2 = Random(vec2(r, time));

    return Particle(
        particleLifetime,
        vec2(0.f),
        normalize(vec2(r, r2) * 2.f - vec2(1.f)) * particleSpeed,
        particleStartColor
    );
}

void main()
{
    const uint id = gl_GlobalInvocationID.x;
    Particle particle = particles[id]; // We take a copy of the current particle here so we need to remember to reinsert it in the buffer before exiting

    if (!liveParticles[id])
        return;

    if (particle.lifetime <= 0.f)
    {
        if (particle.lifetime > NegativeInfinity)
        {
            liveParticles[id] = false;
            particle.lifetime = NegativeInfinity; // Use negative infinity as a flag
            particles[id] = particle;
            return;
        }
        else
        {
            liveParticles[id] = true;
            particle = NewParticle();
        }
    }

    particle.offset += particle.velocity * deltaTime;

    // Modules updates
    if ((enabledModules & ModuleTypesColorOverLifetime) != 0)
        particle = ColorOverLifetimeUpdate(particle);
    if ((enabledModules & ModuleTypesForceOverLifetime) != 0)
        particle = ForceOverLifetimeUpdate(particle);

    particle.lifetime -= deltaTime;

    particles[id] = particle;
}
