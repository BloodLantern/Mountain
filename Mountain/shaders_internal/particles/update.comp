#version 460

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#include "../utils.glsl"
#include "common.glsl"
#include "module_types.glsl"

uniform float time;

#include "shape.glsl"
#include "force_over_lifetime.glsl"
#include "color_over_lifetime.glsl"
#include "color_by_speed.glsl"

uniform uint enabledModules;

Particle NewParticle()
{
    Particle result = Particle(
        particleLifetime,
        particleStartSize,
        vec2(0.f),
        vec2(0.f, -1.f),
        particleStartColor
    );

    if ((enabledModules & ModuleTypesShape) != 0)
        ShapeInitialize(result);

    result.velocity *= particleSpeed;

    return result;
}

void main()
{
    const uint id = gl_GlobalInvocationID.x;
    Particle particle = particles[id]; // We take a copy of the current particle here so we need to remember to reinsert it in the buffer before exiting

    if (!liveParticles[id])
        return;

    if (particle.lifetime <= 0.f)
    {
        if (particle.lifetime > NegativeInfinity)
        {
            liveParticles[id] = false;
            particle.lifetime = NegativeInfinity; // Use negative infinity as a flag
            particles[id] = particle;
            return;
        }
        else
        {
            liveParticles[id] = true;
            particle = NewParticle();
        }
    }

    particle.offset += particle.velocity * deltaTime;
    particle.color = particleStartColor;

    // Modules updates
    if ((enabledModules & ModuleTypesForceOverLifetime) != 0)
        ForceOverLifetimeUpdate(particle);
    if ((enabledModules & ModuleTypesColorOverLifetime) != 0)
        ColorOverLifetimeUpdate(particle);
    if ((enabledModules & ModuleTypesColorBySpeed) != 0)
        ColorBySpeedUpdate(particle);

    particle.lifetime -= deltaTime;

    particles[id] = particle;
}
