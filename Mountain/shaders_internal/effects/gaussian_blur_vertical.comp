#version 460

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (rgba32f, binding = 0) uniform restrict readonly image2D sourceImage;
layout (rgba32f, binding = 1) uniform restrict writeonly image2D destinationImage;

layout(std430, binding = 2) coherent buffer Kernel
{
    float weight[];
};

uniform int radius;

void main()
{
    ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
    vec2 texelf = vec2(texel);
    ivec2 size = ivec2(gl_NumWorkGroups.xy);
    vec2 sizef = vec2(size);

    vec4 newColor = vec4(0.0f);

    newColor += weight[0] * imageLoad(sourceImage, texel);

    for (int i = 1; i <= radius; i++)
    {
        int y1 = clamp(texel.y + i, 0, size.y - 1);
        int y2 = clamp(texel.y - i, 0, size.y - 1);

        vec4 v1 = imageLoad(sourceImage, ivec2(texel.x, y1));
        vec4 v2 = imageLoad(sourceImage, ivec2(texel.x, y2));

        newColor += weight[i] * (v1 + v2);
    }

    imageStore(destinationImage, texel, clamp(newColor, 0.0, 1.0));

}